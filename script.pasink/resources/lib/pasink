#!/bin/bash
MAX_RETRIES=5

export LANG=en_US.UTF-8
export LANGUAGE=en_US

BLUEZ_VERSION=$(bluetoothctl --version | cut -d" " -f2 | awk '{print $0 * 100}')

function usage() {

  echo -e "\nPulse-audio sink-setter with bluez and combined-sink support"
  echo -e "\nUsage:"
  echo -e "  pasink [options] [alsa_device] [bluez_device]"
  echo -e "\nOptions:"
  echo -e "  -h,  --help                             this help text"
  echo -e "  -v,  --vol <0-100>                      set volume for default sink (master)"
  echo -e "  -va, --vol-alsa <0-100> <alsa_device>   set volume for alsa sink"
  echo -e "  -vb, --vol-blue <0-100> <bluez_device>  set volume for bluetooth audio sink"
  echo -e "  -l,  --list                             list default, alsa, bluez and combined sinks"
  echo -e "  -ll, --list-all                         list more technical information of sinks"
  echo -e "  -j,  --json                             simular to list-all but in json format"
  echo -e "  -d,  --disconnect                       disconnect all bluetooth devices"
  echo -e "  -p,  --pair <mac>                       pair new bluetooth a2dp device"
  echo -e "\nExamples:"
  echo -e "  pasink -va 100 -vb 80 belkin hdmi     - creates combined sink of belkin"
  echo -e "                                          (an already paired bluetooth device)"
  echo -e "                                          and HDMI (alsa card device)"
  echo -e "                                          and sets volume for each device"

}

function list() {

  echo -e "\nDefault sink:"
  get_default_sink | cut -f4 | awk '{print "\t"$0}'

  echo -e "\nPlugged Alsa card devices:"
  list_sinks | grep 'alsa_output' | cut -f4 | awk '{print "\t"$0}'

  echo -e "\nSinked Bluetooth A2DP device:"
  list_sinks | grep 'bluez' | cut -f4 | awk '{print "\t"$0}'

  echo -e "\nPaired Bluetooth A2DP devices:"
  cat /tmp/bluez_audio_devices | awk '{ \
    split($0, s, "\t"); \
    status=(s[2] == 1 ? "sinked" : "paired"); \
    print status"\t"s[4]; \
  }'

  pacmd list-sinks | grep 'combine.slaves' > /dev/null
  if [ $? == 0 ]
  then
    echo -e "\nCombined sink:"
    list_sinks | egrep "module-combine-sink" | cut -f4 | \
      sed 's/Simultaneous output to //' | tr "," "\n" | \
      awk '{gsub(/^[ \t]+/, "", $0); print "\t"$0;}'
  fi

  echo -e  "\nVolume:"
  list_sinks | cut -f2,6,4 | egrep "^R" | sed 's/R\t//' | \
    awk '{match($0, "(.*)\t([0-9]+%)$", s); print "\t"s[2]"\t"s[1];}'

  echo

}



function json() {

  default_sink=$(get_default_sink | cut -f5)
  echo -e "{"
  echo -e "  \"sinks\" : ["
  list_sinks | awk -vds="${default_sink}" '\
  BEGIN { out = "" }\
  {\
  split($0, s, "\t");\
  out = out"\
    {\n\
      \"id\" : "s[1]",\n\
      \"status\" : \""(s[2] == "S" ? "SUSPENDED" : "RUNNING")"\",\n\
      \"driver\" : \""s[3]"\",\n\
      \"name\" : \""s[4]"\",\n\
      \"sink\" : \""s[5]"\",\n\
      \"default\" : "(s[5] == ds ? "true" : "false")",\n\
      \"volume\" : \""s[6]"\", \n\
      \"codec\" : \""s[7]"\"  \n\
    \},\n"}\
  END { print substr(out, 0, length(out) - 2) }' 2> /dev/null
  echo -e "  ],"
  echo -e "  \"bluez\" : ["
  cat /tmp/bluez_audio_devices | awk '\
  BEGIN { out = "" }\
  {\
  split($0, s, "\t");\
  out = out"\
    {\n\
      \"controller\" : \""s[1]"\",\n\
      \"mac\" : \""s[3]"\",\n\
      \"status\" : \""(s[2] == 0 ? "PAIRED" : "SINKED")"\",\n\
      \"name\" : \""s[4]"\"\n\
    \},\n"}\
  END { print substr(out, 0, length(out) - 2) }' 2> /dev/null
  echo -e "  ]"
  echo -e "}"

}


function dump() {

  echo -e "\nDefault sink:"
  get_default_sink

  echo -e "\nPlugged Alsa card devices:"
  list_sinks | grep 'alsa_output'

  echo -e "\nSinked Bluetooth A2DP device:"
  list_sinks | grep 'bluez'

  pacmd list-sinks | grep 'combine.slaves' > /dev/null
  if [ $? == 0 ]
  then
    echo -e "\nCombined sink:"
    list_sinks | egrep "module-combine-sink"
  fi

  echo -e "\nPaired Bluetooth A2DP devices:"
  cat /tmp/bluez_audio_devices | awk '{ \
    split($0, s, "\t"); \
    status=(s[2]==1 ? "sinked" : "paired"); \
    print s[3]"\t"status"\t"s[4]; \
  }'

  echo

}

function pair() {

  echo "Not implemted yet."

}

function lookup_bluez_audio_candidates() {

  if [ -e /tmp/bluez_audio_devices ]
  then
    rm -f /tmp/bluez_audio_devices
  fi

  for controller in $(bluetoothctl list | egrep -o [0-9A-F:]{17})
  do
    echo -e "select $controller\ndevices\nquit" | bluetoothctl | awk '/Device/ {match($0, "Device ([0-9A-Z:]+) (.*)$", s); print s[1];}' | while read device
    do
      echo -e "select $controller\ninfo $device\nquit" | bluetoothctl | \
      awk -v controller=$controller 'BEGIN {mac="";name=""; audio=0; connected=0;} \
          /^Device/ {match($0, "Device ([A-F0-9:]+)", s); mac=s[1];} \
          /Name: / {match($0, "Name: (.*)$",s); name=s[1];} \
          /UUID: Audio Sink/ {audio=1;} /Connected: yes/ {connected=1;} \
          END {if (audio==1) print controller"\t"connected"\t"mac"\t"name;}';
    done >> /tmp/bluez_audio_devices
  done

}

function disconnect_bluez_by_mac() {

  _controller=$1
  _mac=$2

  if [ "$_mac" == "" ]
  then
    return
  fi

  echo -e -n "\nDisconnect:\t$_mac "
  expect <<EOD
    log_user 0
    spawn -noecho bluetoothctl
    expect "#"
    send "select $1\n"
    expect "#"
    send "disconnect $2\n"
    expect {
      "Successful disconnected" {
        puts "\\t\\t\\[OK\\]"
      }
      timeout {
        puts "\\t\\t\\[FAIL\\]"
      }
    }
    send "quit\n"
EOD

}

function connect_bluez_by_mac() {

  _controller=$1
  _mac=$2

  if [ "$_mac" == "" ]
  then
    return
  fi

  if [ $BLUEZ_VERSION -ge 565 ]
  then
    bluetoothctl devices Connected | grep $_mac > /dev/null
    if [ $? == 0 ]
    then
      return
    fi 
  fi

  echo -e -n "Connect:\t$_mac "
  expect <<EOD
    log_user 0
    spawn -noecho bluetoothctl
    expect "#"
    send "select $1\n"
    expect "#"
    send "connect $2\n"
    expect {
      "Connection successful" {
        puts "\\t\\t\\[OK\\]"
      }
      timeout {
        puts "\\t\\t\\[FAIL\\]"
      }
    }
    send "quit\n"
EOD

}

function get_bluez_controller() {

  _name=$1
  awk -vreqsink=$_name 'BEGIN{IGNORECASE=1} match($0, reqsink) {match($0, "^([0-9A-Z:]+)\t[01]\t([0-9A-Z:]+)\t(.*)$", s); print s[1];}' /tmp/bluez_audio_devices

}

function get_bluez_mac() {

  _name=$1
  awk -vreqsink=$_name 'BEGIN{IGNORECASE=1} match($0, reqsink) {match($0, "^([0-9A-Z:]+)\t[01]\t([0-9A-Z:]+)\t(.*)$", s); print s[2];}' /tmp/bluez_audio_devices

}

function get_bluez_name() {

  _name=$1
  awk -vreqsink=$_name 'BEGIN{IGNORECASE=1} match($0, reqsink) {match($0, "^([0-9A-Z:]+)\t[01]\t([0-9A-Z:]+)\t(.*)$", s); print s[3];}' /tmp/bluez_audio_devices

}

function get_connected_devices() {

  awk '/\t1\t/ {match($0, "^([0-9A-Z:]+)\t1\t([0-9A-Z:]+)\t(.*)$", s); print s[1]" "s[2];}' /tmp/bluez_audio_devices

}

function make_bluez_sink_name_by_mac() {

  _mac=$1

  if [ $BLUEZ_VERSION -ge 565 ]
  then
    echo bluez_output.$_mac | sed "s/:/_/g"
  else
    echo bluez_sink.$_mac.a2dp_sink | sed "s/:/_/g"
  fi

}

function bluez_name_to_mac () {

  name=$1

  echo $name | grep ^bluez_output >/dev/null
  if [ $? != 0 ]
  then
    echo $name
    return
  fi

  echo $name | awk '{print substr($1, 14, 17)}' | sed "s/_/:/g"
}


function lookup_alsa_device() {

  _pattern=$1
  list_sinks | grep 'alsa_output' | egrep -i "$_pattern" | head -n1 | cut -f5

}

function list_sinks() {

  pacmd list-sinks | tac | awk '\
  BEGIN { \
    id = 0; \
    desc = ""; \
    name = ""; \
    state = ""; \
    driver = ""; \
    volume = ""; \
    codec = ""; \
  } \
  /index: / { \
    match($0, "index: ([0-9]+)$",s); \
    id = s[1]; \
    print id"\t"substr(state, 0, 1)"\t"driver"\t"desc"\t"name"\t"volume"\t"codec; \
    codec = "";
    } \
  /device.description/ { \
    match($0, "device.description = \"(.+)\"$",s); \
    desc = s[1]; \
  } \
  /name: </ { \
    match($0, "name: <(.+)>$",s); \
    name = s[1]; \
  } \
  /state: / { \
    match($0, "state: (.+)$",s); \
    state = s[1]; \
  } \
  /bluetooth.codec/ { \
      match($0, "bluetooth.codec = \"([^\"]+)\"", s); \
      codec = s[1]; \
  }
  /base volume: / { \
  } \
  /volume: front-left/ { \
      match($0, "([0-9]+%).* ([0-9]+%)", s); \
      volume = s[1] == s[2] ? s[1] : "L"s[1]", R"s[2]; \
  }
  /driver: </ { \
    match($0, "driver: <(.+)>$",s); \
    driver = s[1]; \
  }' | sort -n

}

function get_default_sink() {

  _sink=$(pacmd info | awk -F": " '/^Default sink name: / {print $2}')
  list_sinks | egrep "$_sink"

}

function set_default_sink_by_name() {

  sink=$1
  sink_name=$(list_sinks | grep "$sink" | cut -f4)

  echo -n -e "\nDefault sink:\t$sink_name "
  pacmd set-default-sink $sink
  sink_src=$(pacmd list-sink-inputs | grep -B1 "driver: <protocol-native.c>" | grep "index" | egrep -o '[0-9]+' | tail -n1)

  if [ "$sink_src" != "" ]
  then
    pacmd move-sink-input $sink_src $sink
  fi
  echo -e "\t[OK]"

}

function wait_for_sink_available() {

  echo -e -n "Wait for sink:\t$1 "
  retry=0
  while [ $retry -lt $MAX_RETRIES ]
  do
    sleep 1
    pacmd list-sinks | grep "$1" > /dev/null

    if [ $? == 0 ]
    then
      echo -e "\t[OK]"
      return 0
    fi
    echo -n "."
    retry=$(($retry+1))
  done
  echo -e "\t[FAIL]"
  return 1

}

function load_combined_sink() {

  combined="$1,$2"
  sink1_name=$(list_sinks | grep "$1" | cut -f4)
  sink2_name=$(list_sinks | grep "$2" | cut -f4)
  echo -e "\nCreate combined sink of:"
  echo -e "\t$sink1_name"
  echo -e "\t$sink2_name"
  pacmd load-module module-combine-sink sink_name=combined slaves=$combined

}

function unload_combined_sink() {

  pacmd list-modules | grep "module-combine-sink" > /dev/null
  if [ $? == 0 ]
  then
    pacmd unload-module module-combine-sink
  fi

}

function disconnect() {

  while(($#))
  do
    disconnect_bluez_by_mac $1 $2
    shift
    shift
  done

  unload_combined_sink

}

# Step 0: look which bluez devices are available
lookup_bluez_audio_candidates
current_bluez_devices=$(get_connected_devices)

# Step 1: interprete passed parameters
if [ $# -eq 0 ]
then
  usage
  exit 1
fi

while [ "$1" != "" ]; do
  case $1 in
    -h | --help )      usage
                       exit 0
                       ;;
    -l | --list )      list
                       exit 0
                       ;;
    -ll | --list-all ) dump
                       exit 0
                       ;;
    -j | --json )      json
                       exit 0
                       ;;
    -v | --vol )       shift
                       vol=$1
                       ;;
    -va | --vol-alsa ) shift
                       vol_alsa=$1
                       ;;
    -vb | --vol-blue )
                       shift
                       vol_bluez=$1
                       ;;
    -d | --disconnect ) disconnect $current_bluez_devices
                       ;;
    -p | --pair )      pair
                       exit 1
                       ;;
    * )                _p=$(echo "$1" | sed "s/^-*//")
                       if [ "$req1" != "" ]
                       then
                         req2=$_p
                       else
                         req1=$_p
                       fi
                       ;;
  esac
  shift
done

# Step 2: look which bluez device is requested
req_bluez_mac=""
for req_device in $req1 $req2
do
  _req_device=$(bluez_name_to_mac $req_device)
  req_bluez_controller=$(get_bluez_controller $_req_device)
  req_bluez_mac=$(get_bluez_mac $_req_device)
  req_bluez_name=$(get_bluez_name $_req_device)
  req_bluez_sink=$(make_bluez_sink_name_by_mac $req_bluez_mac)

  if [ "$req_bluez_mac" != "" ]
  then
    break
  fi
done

# Step 3: look which alsa device is requested
req_alsa_device=""
for req_device in $req1 $req2
do
  req_alsa_device=$(lookup_alsa_device $req_device)
  if [ "$req_alsa_device" != "" ]
  then
    break
  fi
done

# Step 4: Check if requested devices are available at all
if [ "$req1$req2" != "" ] && [ "$req_bluez_mac$req_alsa_device" == "" ]
then
  echo -e "ERROR: Requested device patterns not found.\n"
  exit 1
fi

# Step 5: If bluez device is requested that is different from current, then connect new bluez device
if [ "$req_bluez_mac" != "" ]
then
  retry2=0
  while [ $retry2 -lt $MAX_RETRIES ]
  do
    connect_bluez_by_mac $req_bluez_controller $req_bluez_mac
    wait_for_sink_available $req_bluez_sink
    if [ $? == 0 ]
    then
      break
    fi
    retry2=$(($retry2+1))
  done

  req_bluez_sink=$(pacmd list-sinks | grep "$req_bluez_sink" | sed -re "s/^.*<([^>]+)>$/\1/")

  if [ $retry2 -eq $MAX_RETRIES ]
  then
    echo "Bluetooth sink not found. Connection failed."
    req_bluez_mac=""
  fi
fi

# Step 6: Build new sink
unload_combined_sink
if [ "$req_bluez_mac" != "" ] && [ "$req_alsa_device" != "" ]
then
  # 6.1. combined alsa + bluez
  load_combined_sink $req_alsa_device $req_bluez_sink
  set_default_sink_by_name "combined"
elif [ "$req_bluez_mac" != "" ]
then
  # 6.2. just bluez
  set_default_sink_by_name $req_bluez_sink
elif [ "$req_alsa_device" != "" ]
then
  # 6.3. just alsa
  set_default_sink_by_name $req_alsa_device
fi

if [ "$vol_alsa" != "" ]
then
  echo -e "Set alsa volume:\t$vol_alsa%"
  echo $req_alsa_device
  pacmd set-sink-volume $req_alsa_device $vol_alsa
fi
if [ "$vol_bluez" != "" ]
then
  echo -e "Set bluetooth volume:\t$vol_bluez%"
  pacmd set-sink-volume $req_bluez_sink $vol_bluez
fi
if [ "$vol" != "" ]
then
  echo -e "Set master volume:\t$vol%"
  ds=$(get_default_sink | cut -f1)
  pacmd set-sink-volume $ds $vol
fi

echo
